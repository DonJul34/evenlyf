# Generated by Django 5.2.4 on 2025-08-01 16:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPassion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la passion')),
                ('category', models.CharField(choices=[('SPORT', 'Sport'), ('ART', 'Art & Culture'), ('TECH', 'Technologie'), ('TRAVEL', 'Voyage'), ('FOOD', 'Cuisine'), ('MUSIC', 'Musique'), ('READING', 'Lecture'), ('GAMING', 'Jeux'), ('NATURE', 'Nature'), ('FITNESS', 'Fitness'), ('PHOTOGRAPHY', 'Photographie'), ('COOKING', 'Cuisine'), ('DANCING', 'Danse'), ('MOVIES', 'Cinéma'), ('OTHER', 'Autre')], max_length=20, verbose_name='Catégorie')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
            ],
            options={
                'verbose_name': 'Passion',
                'verbose_name_plural': 'Passions',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Téléphone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Homme'), ('F', 'Femme'), ('O', 'Autre'), ('N', 'Ne souhaite pas préciser')], max_length=1, verbose_name='Genre')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Photo de profil')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biographie')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='Localisation')),
                ('personality_type', models.CharField(blank=True, choices=[('INTJ', 'INTJ - Architecte'), ('INTP', 'INTP - Penseur'), ('ENTJ', 'ENTJ - Commandant'), ('ENTP', 'ENTP - Innovateur'), ('INFJ', 'INFJ - Avocat'), ('INFP', 'INFP - Médiateur'), ('ENFJ', 'ENFJ - Protagoniste'), ('ENFP', 'ENFP - Inspirateur'), ('ISTJ', 'ISTJ - Logisticien'), ('ISFJ', 'ISFJ - Protecteur'), ('ESTJ', 'ESTJ - Directeur'), ('ESFJ', 'ESFJ - Consul'), ('ISTP', 'ISTP - Virtuose'), ('ISFP', 'ISFP - Aventurier'), ('ESTP', 'ESTP - Entrepreneur'), ('ESFP', 'ESFP - Amuseur')], max_length=4, verbose_name='Type MBTI')),
                ('disc_type', models.CharField(blank=True, choices=[('D', 'Dominant'), ('I', 'Influent'), ('S', 'Stable'), ('C', 'Consciencieux')], max_length=1, verbose_name='Type DISC')),
                ('personality_test_completed', models.BooleanField(default=False, verbose_name='Test de personnalité complété')),
                ('personality_test_date', models.DateTimeField(blank=True, null=True, verbose_name='Date du test')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email vérifié')),
                ('onboarding_completed', models.BooleanField(default=False, verbose_name='Onboarding complété')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Compte premium')),
                ('premium_until', models.DateTimeField(blank=True, null=True, verbose_name="Premium jusqu'à")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('last_login_at', models.DateTimeField(blank=True, null=True, verbose_name='Dernière connexion')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PersonalityTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extraversion_score', models.IntegerField(default=50, verbose_name='Score Extraversion')),
                ('intuition_score', models.IntegerField(default=50, verbose_name='Score Intuition')),
                ('thinking_score', models.IntegerField(default=50, verbose_name='Score Thinking')),
                ('judging_score', models.IntegerField(default=50, verbose_name='Score Judging')),
                ('dominance_score', models.IntegerField(default=25, verbose_name='Score Dominance')),
                ('influence_score', models.IntegerField(default=25, verbose_name='Score Influence')),
                ('steadiness_score', models.IntegerField(default=25, verbose_name='Score Steadiness')),
                ('conscientiousness_score', models.IntegerField(default=25, verbose_name='Score Conscientiousness')),
                ('mbti_result', models.CharField(choices=[('INTJ', 'INTJ - Architecte'), ('INTP', 'INTP - Penseur'), ('ENTJ', 'ENTJ - Commandant'), ('ENTP', 'ENTP - Innovateur'), ('INFJ', 'INFJ - Avocat'), ('INFP', 'INFP - Médiateur'), ('ENFJ', 'ENFJ - Protagoniste'), ('ENFP', 'ENFP - Inspirateur'), ('ISTJ', 'ISTJ - Logisticien'), ('ISFJ', 'ISFJ - Protecteur'), ('ESTJ', 'ESTJ - Directeur'), ('ESFJ', 'ESFJ - Consul'), ('ISTP', 'ISTP - Virtuose'), ('ISFP', 'ISFP - Aventurier'), ('ESTP', 'ESTP - Entrepreneur'), ('ESFP', 'ESFP - Amuseur')], max_length=4, verbose_name='Résultat MBTI')),
                ('disc_result', models.CharField(choices=[('D', 'Dominant'), ('I', 'Influent'), ('S', 'Stable'), ('C', 'Consciencieux')], max_length=1, verbose_name='Résultat DISC dominant')),
                ('test_duration_seconds', models.IntegerField(default=0, verbose_name='Durée du test (secondes)')),
                ('completed_at', models.DateTimeField(auto_now_add=True, verbose_name='Complété le')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personality_result', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Résultat de test de personnalité',
                'verbose_name_plural': 'Résultats de tests de personnalité',
            },
        ),
        migrations.CreateModel(
            name='UserPassionSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intensity_level', models.IntegerField(default=1, help_text='1-5 niveau de passion', verbose_name="Niveau d'intensité")),
                ('selected_at', models.DateTimeField(auto_now_add=True, verbose_name='Sélectionné le')),
                ('passion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_selections', to='users.userpassion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passion_selections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sélection de passion',
                'verbose_name_plural': 'Sélections de passions',
                'ordering': ['-intensity_level', '-selected_at'],
                'unique_together': {('user', 'passion')},
            },
        ),
    ]
